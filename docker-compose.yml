services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: kafka-golang-demo-cluster-1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka-setup:
    image: apache/kafka:3.9.1
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Creating topic kafka-golang-demo-topic...' &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic kafka-golang-demo-topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
        echo 'Topic creation completed.'
      "
    restart: on-failure

  producer:
    build:
      context: .
      dockerfile: cli/producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TOPIC=kafka-golang-demo-topic

  consumer:
    build:
      context: .
      dockerfile: cli/consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TOPIC=kafka-golang-demo-topic
      - GROUP_ID=golang-demo-group
